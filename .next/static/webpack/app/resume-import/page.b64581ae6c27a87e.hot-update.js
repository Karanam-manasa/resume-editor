"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/resume-import/page",{

/***/ "(app-client)/./src/app/lib/parse-resume-from-pdf/group-text-items-into-lines.ts":
/*!**************************************************************************!*\
  !*** ./src/app/lib/parse-resume-from-pdf/group-text-items-into-lines.ts ***!
  \**************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"groupTextItemsIntoLines\": function() { return /* binding */ groupTextItemsIntoLines; }\n/* harmony export */ });\n/* harmony import */ var lib_parse_resume_from_pdf_extract_resume_from_sections_lib_bullet_points__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lib/parse-resume-from-pdf/extract-resume-from-sections/lib/bullet-points */ \"(app-client)/./src/app/lib/parse-resume-from-pdf/extract-resume-from-sections/lib/bullet-points.ts\");\n\nconst groupTextItemsIntoLines = (textItems)=>{\n    const lines = [];\n    let line = [];\n    for (let item of textItems){\n        if (item.hasEOL) {\n            if (item.text.trim() !== \"\") {\n                line.push({\n                    ...item\n                });\n            }\n            lines.push(line);\n            line = [];\n        } else if (item.text.trim() !== \"\") {\n            line.push({\n                ...item\n            });\n        }\n    }\n    if (line.length > 0) {\n        lines.push(line);\n    }\n    const typicalCharWidth = getTypicalCharWidth(lines.flat());\n    for (let line of lines){\n        for(let i = line.length - 1; i > 0; i--){\n            const currentItem = line[i];\n            const leftItem = line[i - 1];\n            const leftItemXEnd = leftItem.x + leftItem.width;\n            const distance = currentItem.x - leftItemXEnd;\n            if (distance <= typicalCharWidth) {\n                if (shouldAddSpaceBetweenText(leftItem.text, currentItem.text)) {\n                    leftItem.text += \" \";\n                }\n                leftItem.text += currentItem.text;\n                const currentItemXEnd = currentItem.x + currentItem.width;\n                leftItem.width = currentItemXEnd - leftItem.x;\n                line.splice(i, 1);\n            }\n        }\n    }\n    return lines;\n};\n// Sometimes a space is lost while merging adjacent text items. This accounts for some of those cases\nconst shouldAddSpaceBetweenText = (leftText, rightText)=>{\n    const leftTextEnd = leftText[leftText.length - 1];\n    const rightTextStart = rightText[0];\n    const conditions = [\n        [\n            \":\",\n            \",\",\n            \"|\",\n            \".\",\n            ...lib_parse_resume_from_pdf_extract_resume_from_sections_lib_bullet_points__WEBPACK_IMPORTED_MODULE_0__.BULLET_POINTS\n        ].includes(leftTextEnd) && rightTextStart !== \" \",\n        leftTextEnd !== \" \" && [\n            \"|\",\n            ...lib_parse_resume_from_pdf_extract_resume_from_sections_lib_bullet_points__WEBPACK_IMPORTED_MODULE_0__.BULLET_POINTS\n        ].includes(rightTextStart)\n    ];\n    return conditions.some((condition)=>condition);\n};\n/**\r\n * Return the width of a typical character. (Helper util for groupTextItemsIntoLines)\r\n *\r\n * A pdf file uses different characters, each with different width due to different\r\n * font family and font size. This util first extracts the most typically used font\r\n * family and font height, and compute the average character width using text items\r\n * that match the typical font family and height.\r\n */ const getTypicalCharWidth = (textItems)=>{\n    // Exclude empty space \" \" in calculations since its width isn't precise\n    textItems = textItems.filter((item)=>item.text.trim() !== \"\");\n    const heightToCount = {};\n    let commonHeight = 0;\n    let heightMaxCount = 0;\n    const fontNameToCount = {};\n    let commonFontName = \"\";\n    let fontNameMaxCount = 0;\n    for (let item of textItems){\n        const { text , height , fontName  } = item;\n        // Process height\n        if (!heightToCount[height]) {\n            heightToCount[height] = 0;\n        }\n        heightToCount[height]++;\n        if (heightToCount[height] > heightMaxCount) {\n            commonHeight = height;\n            heightMaxCount = heightToCount[height];\n        }\n        // Process font name\n        if (!fontNameToCount[fontName]) {\n            fontNameToCount[fontName] = 0;\n        }\n        fontNameToCount[fontName] += text.length;\n        if (fontNameToCount[fontName] > fontNameMaxCount) {\n            commonFontName = fontName;\n            fontNameMaxCount = fontNameToCount[fontName];\n        }\n    }\n    // Find the text items that match common font family and height\n    const commonTextItems = textItems.filter((item)=>item.fontName === commonFontName && item.height === commonHeight);\n    // Aggregate total width and number of characters of all common text items\n    const [totalWidth, numChars] = commonTextItems.reduce((acc, cur)=>{\n        const [preWidth, prevChars] = acc;\n        return [\n            preWidth + cur.width,\n            prevChars + cur.text.length\n        ];\n    }, [\n        0,\n        0\n    ]);\n    const typicalCharWidth = totalWidth / numChars;\n    return typicalCharWidth;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-client)/./src/app/lib/parse-resume-from-pdf/group-text-items-into-lines.ts\n"));

/***/ })

});