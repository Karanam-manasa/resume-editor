"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/resume-import/page",{

/***/ "(app-client)/./src/app/lib/parse-resume-from-pdf/group-lines-into-sections.ts":
/*!************************************************************************!*\
  !*** ./src/app/lib/parse-resume-from-pdf/group-lines-into-sections.ts ***!
  \************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PROFILE_SECTION\": function() { return /* binding */ PROFILE_SECTION; },\n/* harmony export */   \"groupLinesIntoSections\": function() { return /* binding */ groupLinesIntoSections; }\n/* harmony export */ });\n/* harmony import */ var lib_parse_resume_from_pdf_extract_resume_from_sections_lib_common_features__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lib/parse-resume-from-pdf/extract-resume-from-sections/lib/common-features */ \"(app-client)/./src/app/lib/parse-resume-from-pdf/extract-resume-from-sections/lib/common-features.ts\");\n\nconst PROFILE_SECTION = \"profile\";\nconst groupLinesIntoSections = (lines)=>{\n    let sections = {};\n    let sectionName = PROFILE_SECTION;\n    let sectionLines = [];\n    for(let i = 0; i < lines.length; i++){\n        var _line_;\n        const line = lines[i];\n        const text = (_line_ = line[0]) === null || _line_ === void 0 ? void 0 : _line_.text.trim();\n        if (isSectionTitle(line, i)) {\n            sections[sectionName] = [\n                ...sectionLines\n            ];\n            sectionName = text;\n            sectionLines = [];\n        } else {\n            sectionLines.push(line);\n        }\n    }\n    if (sectionLines.length > 0) {\n        sections[sectionName] = [\n            ...sectionLines\n        ];\n    }\n    return sections;\n};\nconst SECTION_TITLE_PRIMARY_KEYWORDS = [\n    \"experience\",\n    \"education\",\n    \"project\",\n    \"skill\"\n];\nconst SECTION_TITLE_SECONDARY_KEYWORDS = [\n    \"job\",\n    \"course\",\n    \"extracurricular\",\n    \"objective\",\n    \"summary\",\n    \"award\",\n    \"honor\",\n    \"project\"\n];\nconst SECTION_TITLE_KEYWORDS = [\n    ...SECTION_TITLE_PRIMARY_KEYWORDS,\n    ...SECTION_TITLE_SECONDARY_KEYWORDS\n];\nconst isSectionTitle = (line, lineNumber)=>{\n    const isFirstTwoLines = lineNumber < 2;\n    const hasMoreThanOneItemInLine = line.length > 1;\n    const hasNoItemInLine = line.length === 0;\n    if (isFirstTwoLines || hasMoreThanOneItemInLine || hasNoItemInLine) {\n        return false;\n    }\n    const textItem = line[0];\n    // The main heuristic to determine a section title is to check if the text is double emphasized\n    // to be both bold and all uppercase, which is generally true for a well formatted resume\n    if ((0,lib_parse_resume_from_pdf_extract_resume_from_sections_lib_common_features__WEBPACK_IMPORTED_MODULE_0__.isBold)(textItem) && (0,lib_parse_resume_from_pdf_extract_resume_from_sections_lib_common_features__WEBPACK_IMPORTED_MODULE_0__.hasLetterAndIsAllUpperCase)(textItem)) {\n        return true;\n    }\n    // The following is a fallback heuristic to detect section title if it includes a keyword match\n    // (This heuristics is not well tested and may not work well)\n    const text = textItem.text.trim();\n    const textHasAtMost2Words = text.split(\" \").filter((s)=>s !== \"&\").length <= 2;\n    const startsWithCapitalLetter = /[A-Z]/.test(text.slice(0, 1));\n    if (textHasAtMost2Words && (0,lib_parse_resume_from_pdf_extract_resume_from_sections_lib_common_features__WEBPACK_IMPORTED_MODULE_0__.hasOnlyLettersSpacesAmpersands)(textItem) && startsWithCapitalLetter && SECTION_TITLE_KEYWORDS.some((keyword)=>text.toLowerCase().includes(keyword))) {\n        return true;\n    }\n    return false;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vc3JjL2FwcC9saWIvcGFyc2UtcmVzdW1lLWZyb20tcGRmL2dyb3VwLWxpbmVzLWludG8tc2VjdGlvbnMudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBVW9GO0FBRTdFLE1BQU1HLGtCQUE2QixVQUFVO0FBRTdDLE1BQU1DLHlCQUF5QixDQUFDQztJQUNyQyxJQUFJQyxXQUFpQyxDQUFDO0lBQ3RDLElBQUlDLGNBQXNCSjtJQUMxQixJQUFJSyxlQUFlLEVBQUU7SUFDckIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlKLE1BQU1LLFFBQVFELElBQUs7WUFFeEJFO1FBRGIsTUFBTUEsT0FBT04sS0FBSyxDQUFDSSxFQUFFO1FBQ3JCLE1BQU1HLE9BQU9ELENBQUFBLFNBQUFBLElBQUksQ0FBQyxFQUFFLGNBQVBBLG9CQUFBQSxLQUFBQSxJQUFBQSxPQUFTQyxLQUFLQztRQUMzQixJQUFJQyxlQUFlSCxNQUFNRixJQUFJO1lBQzNCSCxRQUFRLENBQUNDLFlBQVksR0FBRzttQkFBSUM7YUFBYTtZQUN6Q0QsY0FBY0s7WUFDZEosZUFBZSxFQUFFO1FBQ25CLE9BQU87WUFDTEEsYUFBYU8sS0FBS0o7UUFDcEI7SUFDRjtJQUNBLElBQUlILGFBQWFFLFNBQVMsR0FBRztRQUMzQkosUUFBUSxDQUFDQyxZQUFZLEdBQUc7ZUFBSUM7U0FBYTtJQUMzQztJQUNBLE9BQU9GO0FBQ1QsRUFBRTtBQUVGLE1BQU1VLGlDQUFpQztJQUNyQztJQUNBO0lBQ0E7SUFDQTtDQUNEO0FBQ0QsTUFBTUMsbUNBQW1DO0lBQ3ZDO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUNELE1BQU1DLHlCQUF5QjtPQUMxQkY7T0FDQUM7Q0FDSjtBQUVELE1BQU1ILGlCQUFpQixDQUFDSCxNQUFZUTtJQUNsQyxNQUFNQyxrQkFBa0JELGFBQWE7SUFDckMsTUFBTUUsMkJBQTJCVixLQUFLRCxTQUFTO0lBQy9DLE1BQU1ZLGtCQUFrQlgsS0FBS0QsV0FBVztJQUN4QyxJQUFJVSxtQkFBbUJDLDRCQUE0QkMsaUJBQWlCO1FBQ2xFLE9BQU87SUFDVDtJQUVBLE1BQU1DLFdBQVdaLElBQUksQ0FBQyxFQUFFO0lBRXhCLCtGQUErRjtJQUMvRix5RkFBeUY7SUFDekYsSUFBSVQsa0hBQU1BLENBQUNxQixhQUFhdkIsc0lBQTBCQSxDQUFDdUIsV0FBVztRQUM1RCxPQUFPO0lBQ1Q7SUFFQSwrRkFBK0Y7SUFDL0YsNkRBQTZEO0lBQzdELE1BQU1YLE9BQU9XLFNBQVNYLEtBQUtDO0lBQzNCLE1BQU1XLHNCQUNKWixLQUFLYSxNQUFNLEtBQUtDLE9BQU8sQ0FBQ0MsSUFBTUEsTUFBTSxLQUFLakIsVUFBVTtJQUNyRCxNQUFNa0IsMEJBQTBCLFFBQVFDLEtBQUtqQixLQUFLa0IsTUFBTSxHQUFHO0lBRTNELElBQ0VOLHVCQUNBdkIsMElBQThCQSxDQUFDc0IsYUFDL0JLLDJCQUNBVix1QkFBdUJhLEtBQUssQ0FBQ0MsVUFDM0JwQixLQUFLcUIsY0FBY0MsU0FBU0YsV0FFOUI7UUFDQSxPQUFPO0lBQ1Q7SUFFQSxPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2FwcC9saWIvcGFyc2UtcmVzdW1lLWZyb20tcGRmL2dyb3VwLWxpbmVzLWludG8tc2VjdGlvbnMudHM/Y2Q1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlc3VtZUtleSB9IGZyb20gXCJsaWIvcmVkdXgvdHlwZXNcIjtcclxuaW1wb3J0IHR5cGUge1xyXG4gIExpbmUsXHJcbiAgTGluZXMsXHJcbiAgUmVzdW1lU2VjdGlvblRvTGluZXMsXHJcbn0gZnJvbSBcImxpYi9wYXJzZS1yZXN1bWUtZnJvbS1wZGYvdHlwZXNcIjtcclxuaW1wb3J0IHtcclxuICBoYXNMZXR0ZXJBbmRJc0FsbFVwcGVyQ2FzZSxcclxuICBoYXNPbmx5TGV0dGVyc1NwYWNlc0FtcGVyc2FuZHMsXHJcbiAgaXNCb2xkLFxyXG59IGZyb20gXCJsaWIvcGFyc2UtcmVzdW1lLWZyb20tcGRmL2V4dHJhY3QtcmVzdW1lLWZyb20tc2VjdGlvbnMvbGliL2NvbW1vbi1mZWF0dXJlc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBST0ZJTEVfU0VDVElPTjogUmVzdW1lS2V5ID0gXCJwcm9maWxlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZ3JvdXBMaW5lc0ludG9TZWN0aW9ucyA9IChsaW5lczogTGluZXMpID0+IHtcclxuICBsZXQgc2VjdGlvbnM6IFJlc3VtZVNlY3Rpb25Ub0xpbmVzID0ge307XHJcbiAgbGV0IHNlY3Rpb25OYW1lOiBzdHJpbmcgPSBQUk9GSUxFX1NFQ1RJT047XHJcbiAgbGV0IHNlY3Rpb25MaW5lcyA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tpXTtcclxuICAgIGNvbnN0IHRleHQgPSBsaW5lWzBdPy50ZXh0LnRyaW0oKTtcclxuICAgIGlmIChpc1NlY3Rpb25UaXRsZShsaW5lLCBpKSkge1xyXG4gICAgICBzZWN0aW9uc1tzZWN0aW9uTmFtZV0gPSBbLi4uc2VjdGlvbkxpbmVzXTtcclxuICAgICAgc2VjdGlvbk5hbWUgPSB0ZXh0O1xyXG4gICAgICBzZWN0aW9uTGluZXMgPSBbXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNlY3Rpb25MaW5lcy5wdXNoKGxpbmUpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoc2VjdGlvbkxpbmVzLmxlbmd0aCA+IDApIHtcclxuICAgIHNlY3Rpb25zW3NlY3Rpb25OYW1lXSA9IFsuLi5zZWN0aW9uTGluZXNdO1xyXG4gIH1cclxuICByZXR1cm4gc2VjdGlvbnM7XHJcbn07XHJcblxyXG5jb25zdCBTRUNUSU9OX1RJVExFX1BSSU1BUllfS0VZV09SRFMgPSBbXHJcbiAgXCJleHBlcmllbmNlXCIsXHJcbiAgXCJlZHVjYXRpb25cIixcclxuICBcInByb2plY3RcIixcclxuICBcInNraWxsXCIsXHJcbl07XHJcbmNvbnN0IFNFQ1RJT05fVElUTEVfU0VDT05EQVJZX0tFWVdPUkRTID0gW1xyXG4gIFwiam9iXCIsXHJcbiAgXCJjb3Vyc2VcIixcclxuICBcImV4dHJhY3VycmljdWxhclwiLFxyXG4gIFwib2JqZWN0aXZlXCIsXHJcbiAgXCJzdW1tYXJ5XCIsIC8vIExpbmtlZEluIGdlbmVyYXRlZCByZXN1bWUgaGFzIGEgc3VtbWFyeSBzZWN0aW9uXHJcbiAgXCJhd2FyZFwiLFxyXG4gIFwiaG9ub3JcIixcclxuICBcInByb2plY3RcIixcclxuXTtcclxuY29uc3QgU0VDVElPTl9USVRMRV9LRVlXT1JEUyA9IFtcclxuICAuLi5TRUNUSU9OX1RJVExFX1BSSU1BUllfS0VZV09SRFMsXHJcbiAgLi4uU0VDVElPTl9USVRMRV9TRUNPTkRBUllfS0VZV09SRFMsXHJcbl07XHJcblxyXG5jb25zdCBpc1NlY3Rpb25UaXRsZSA9IChsaW5lOiBMaW5lLCBsaW5lTnVtYmVyOiBudW1iZXIpID0+IHtcclxuICBjb25zdCBpc0ZpcnN0VHdvTGluZXMgPSBsaW5lTnVtYmVyIDwgMjtcclxuICBjb25zdCBoYXNNb3JlVGhhbk9uZUl0ZW1JbkxpbmUgPSBsaW5lLmxlbmd0aCA+IDE7XHJcbiAgY29uc3QgaGFzTm9JdGVtSW5MaW5lID0gbGluZS5sZW5ndGggPT09IDA7XHJcbiAgaWYgKGlzRmlyc3RUd29MaW5lcyB8fCBoYXNNb3JlVGhhbk9uZUl0ZW1JbkxpbmUgfHwgaGFzTm9JdGVtSW5MaW5lKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBjb25zdCB0ZXh0SXRlbSA9IGxpbmVbMF07XHJcblxyXG4gIC8vIFRoZSBtYWluIGhldXJpc3RpYyB0byBkZXRlcm1pbmUgYSBzZWN0aW9uIHRpdGxlIGlzIHRvIGNoZWNrIGlmIHRoZSB0ZXh0IGlzIGRvdWJsZSBlbXBoYXNpemVkXHJcbiAgLy8gdG8gYmUgYm90aCBib2xkIGFuZCBhbGwgdXBwZXJjYXNlLCB3aGljaCBpcyBnZW5lcmFsbHkgdHJ1ZSBmb3IgYSB3ZWxsIGZvcm1hdHRlZCByZXN1bWVcclxuICBpZiAoaXNCb2xkKHRleHRJdGVtKSAmJiBoYXNMZXR0ZXJBbmRJc0FsbFVwcGVyQ2FzZSh0ZXh0SXRlbSkpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLy8gVGhlIGZvbGxvd2luZyBpcyBhIGZhbGxiYWNrIGhldXJpc3RpYyB0byBkZXRlY3Qgc2VjdGlvbiB0aXRsZSBpZiBpdCBpbmNsdWRlcyBhIGtleXdvcmQgbWF0Y2hcclxuICAvLyAoVGhpcyBoZXVyaXN0aWNzIGlzIG5vdCB3ZWxsIHRlc3RlZCBhbmQgbWF5IG5vdCB3b3JrIHdlbGwpXHJcbiAgY29uc3QgdGV4dCA9IHRleHRJdGVtLnRleHQudHJpbSgpO1xyXG4gIGNvbnN0IHRleHRIYXNBdE1vc3QyV29yZHMgPVxyXG4gICAgdGV4dC5zcGxpdChcIiBcIikuZmlsdGVyKChzKSA9PiBzICE9PSBcIiZcIikubGVuZ3RoIDw9IDI7XHJcbiAgY29uc3Qgc3RhcnRzV2l0aENhcGl0YWxMZXR0ZXIgPSAvW0EtWl0vLnRlc3QodGV4dC5zbGljZSgwLCAxKSk7XHJcblxyXG4gIGlmIChcclxuICAgIHRleHRIYXNBdE1vc3QyV29yZHMgJiZcclxuICAgIGhhc09ubHlMZXR0ZXJzU3BhY2VzQW1wZXJzYW5kcyh0ZXh0SXRlbSkgJiZcclxuICAgIHN0YXJ0c1dpdGhDYXBpdGFsTGV0dGVyICYmXHJcbiAgICBTRUNUSU9OX1RJVExFX0tFWVdPUkRTLnNvbWUoKGtleXdvcmQpID0+XHJcbiAgICAgIHRleHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhrZXl3b3JkKVxyXG4gICAgKVxyXG4gICkge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZmFsc2U7XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJoYXNMZXR0ZXJBbmRJc0FsbFVwcGVyQ2FzZSIsImhhc09ubHlMZXR0ZXJzU3BhY2VzQW1wZXJzYW5kcyIsImlzQm9sZCIsIlBST0ZJTEVfU0VDVElPTiIsImdyb3VwTGluZXNJbnRvU2VjdGlvbnMiLCJsaW5lcyIsInNlY3Rpb25zIiwic2VjdGlvbk5hbWUiLCJzZWN0aW9uTGluZXMiLCJpIiwibGVuZ3RoIiwibGluZSIsInRleHQiLCJ0cmltIiwiaXNTZWN0aW9uVGl0bGUiLCJwdXNoIiwiU0VDVElPTl9USVRMRV9QUklNQVJZX0tFWVdPUkRTIiwiU0VDVElPTl9USVRMRV9TRUNPTkRBUllfS0VZV09SRFMiLCJTRUNUSU9OX1RJVExFX0tFWVdPUkRTIiwibGluZU51bWJlciIsImlzRmlyc3RUd29MaW5lcyIsImhhc01vcmVUaGFuT25lSXRlbUluTGluZSIsImhhc05vSXRlbUluTGluZSIsInRleHRJdGVtIiwidGV4dEhhc0F0TW9zdDJXb3JkcyIsInNwbGl0IiwiZmlsdGVyIiwicyIsInN0YXJ0c1dpdGhDYXBpdGFsTGV0dGVyIiwidGVzdCIsInNsaWNlIiwic29tZSIsImtleXdvcmQiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-client)/./src/app/lib/parse-resume-from-pdf/group-lines-into-sections.ts\n"));

/***/ })

});